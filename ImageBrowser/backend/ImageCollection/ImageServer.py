####################################################################################################
#
# ImageBrowser â€” ...
# Copyright (C) 2024 Fabrice SALVAIRE
# SPDX-License-Identifier: GPL-3.0-or-later
#
####################################################################################################

__all__ = ['ImageServer']

# [How to create routes with FastAPI within a class](https://stackoverflow.com/questions/63853813/how-to-create-routes-with-fastapi-within-a-class)
# [How do I return an image in fastAPI?](https://stackoverflow.com/questions/55873174/how-do-i-return-an-image-in-fastapi)
# [Custom Response Classes - File, HTML, Redirect, Streaming, etc. - FastAPI](https://fastapi.tiangolo.com/reference/responses)

# Fixme: fastapi logging is lost

####################################################################################################

import logging
from pathlib import Path
from typing import Union

from fastapi import FastAPI, APIRouter, Response
from fastapi.responses import FileResponse

# from .Image import FileImage
from ImageBrowser.library.path.file import File

####################################################################################################

_module_logger = logging.getLogger(__name__)

type PathStr = Union[Path, str]

####################################################################################################

class ImageExamples:

    IMAGE_EXAMPLES = Path(__file__).parents[3].joinpath('image-examples')
    print(f"IMAGE_EXAMPLES={IMAGE_EXAMPLES}")

    ##############################################

    def __init__(self) -> None:
        pass

    ##############################################

    def image_path(self) -> Path:
        return self.IMAGE_EXAMPLES.joinpath('20240426_142347.jpg')

    ##############################################

    def image_bytes(self) -> bytes:
        path = self.image_path()
        # img = FileImage(path)
        file = File(path)
        return file.read()

####################################################################################################

class ImageServer:

    _logger = _module_logger.getChild('ImageServer')

    ##############################################

    def __init__(self) -> None:
        self._app = FastAPI()
        self._router = APIRouter()
        self._router.add_api_route(
            '/hello',
            self.hello,
            methods=['GET'],
        )
        self._router.add_api_route(
            '/image/{id}',
            self.image,
            methods=['GET'],
            # Set what the media type will be in the autogenerated OpenAPI specification.
            # https://fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
            responses={
                200: {
                    'content': {'image/jpg': {}}
                }
            },
            # Prevent FastAPI from adding "application/json" as an additional
            # response media type in the autogenerated OpenAPI specification.
            # https://github.com/tiangolo/fastapi/issues/3258
            response_class=Response,
        )
        self._router.add_api_route(
            '/file-image/{id}',
            self.file_image,
            methods=['GET'],
            # response_class=FileResponse,
        )
        self._app.include_router(self._router)

    ##############################################

    @property
    def app(self) -> FastAPI:
        return self._app

    ##############################################

    def hello(self) -> str:
        return 'Hello'

    ##############################################

    def image(self, id: str) -> Response:
        self._logger.info(f"id={id}")
        image_bytes = ImageExamples().image_bytes()
        # media_type here sets the media type of the actual response sent to the client.
        return Response(content=image_bytes, media_type='image/jpg')

    ##############################################

    # Fixme: async ???

    async def file_image(self) -> FileResponse:
        self._logger.info(f"id={id}")
        path = ImageExamples().image_path()
        return FileResponse(path)
